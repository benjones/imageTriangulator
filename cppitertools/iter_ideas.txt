movingsection(Container & container,size_t section_size);
Lets say you have a list
    [1,2,3,4,5,6,7,8]
and you want to iterate over 3 elements at a time. You could create three 
iterators and incrment them simulatneously, or do something like this.
    for (auto tuple : group_x(list,4))
In this you get the first 4 then all iters are incremeted by 1 each time so 
the iterations would be  

1 2 3
2 3 4
3 4 5
4 5 6
5 6 7
6 7 8


zip_longest using boost::optional or std::optional when support exists.
useful if a lot of the containers are of different sizes. may want to write
a different zip_get that works better with optional

Might be a good idea to do a powerset function

Recipes: 
Not all of the recipes are useful, IMO here are the ones I think we should do

------------------------------------------------------------------------------
take(n, range)

takes first n items from range and turns it into its own list

------------------------------------------------------------------------------
quantify(range,predicate)

return amount of times predicate is true

------------------------------------------------------------------------------
def flatten(listoflists)

flattens one level of nesting
would be tricky in c++ but kinda useful

------------------------------------------------------------------------------
roundrobin(Containers ... containers)
    
takes the first element off in sequence

------------------------------------------------------------------------------
unique_everseen(range)

only shows unique elements

------------------------------------------------------------------------------
unique_justseen(range)

if multiple are the same in a row only display the first one
